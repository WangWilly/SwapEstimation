// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface_mock.go -package=eth
//

// Package eth is a generated GoMock package.
package eth

import (
	context "context"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockGethClient is a mock of GethClient interface.
type MockGethClient struct {
	ctrl     *gomock.Controller
	recorder *MockGethClientMockRecorder
	isgomock struct{}
}

// MockGethClientMockRecorder is the mock recorder for MockGethClient.
type MockGethClientMockRecorder struct {
	mock *MockGethClient
}

// NewMockGethClient creates a new mock instance.
func NewMockGethClient(ctrl *gomock.Controller) *MockGethClient {
	mock := &MockGethClient{ctrl: ctrl}
	mock.recorder = &MockGethClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGethClient) EXPECT() *MockGethClientMockRecorder {
	return m.recorder
}

// BlockNumber mocks base method.
func (m *MockGethClient) BlockNumber(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockNumber", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumber indicates an expected call of BlockNumber.
func (mr *MockGethClientMockRecorder) BlockNumber(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumber", reflect.TypeOf((*MockGethClient)(nil).BlockNumber), ctx)
}

// FilterLogs mocks base method.
func (m *MockGethClient) FilterLogs(ctx context.Context, q ethereum.FilterQuery) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterLogs", ctx, q)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterLogs indicates an expected call of FilterLogs.
func (mr *MockGethClientMockRecorder) FilterLogs(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLogs", reflect.TypeOf((*MockGethClient)(nil).FilterLogs), ctx, q)
}
